@Definitions
0@openbb.root.whoami()
1@openbb.root.news(term: str = "", sources: str = "", tag: Any = "", source: Any = "")
2@openbb.forex.fwd(to_symbol: str = "USD", from_symbol: str = "EUR")
3@openbb.forex.oanda.calendar(days: int = 14, instrument: Optional[str] = None)
4@openbb.root.login(email: str = "", password: str = "", token: str = "", keep_session: bool = False, silent: bool = False)
5@openbb.root.logout()
6@openbb.forex.oanda.summary(accountID: str = "REPLACE_ME")
7@openbb.forex.load(to_symbol: str, from_symbol: str, resolution: str = "d", interval: str = "1day", start_date: Optional[str] = None, end_date: Optional[str] = None, source: str = "YahooFinance", verbose: bool = False)
8@openbb.forex.get_currency_list()
9@openbb.forex.oanda.price(accountID: str = "REPLACE_ME", instrument: Optional[str] = None)
10@openbb.forex.oanda.openpositions(accountID: str = "REPLACE_ME")
11@openbb.forex.quote(symbol: str, source: str = "YahooFinance")
12@openbb.forex.oanda.orderbook(instrument: Optional[str] = None, accountID: str = "REPLACE_ME")
13@openbb.forex.oanda.close(orderID: str, units: Optional[int] = 0, accountID: str = "REPLACE_ME")
14@openbb.forex.candle(data: pd.DataFrame, to_symbol: str = "", from_symbol: str = "", ma: Optional[Iterable[int]] = None, external_axes: bool = False, add_trend: bool = False, yscale: str = "linear")
15@openbb.forex.oanda.pending(accountID: str = "REPLACE_ME")
16@openbb.forex.oanda.opentrades(accountID: str = "REPLACE_ME")
17@openbb.forex.oanda.listorders(order_state: str = "PENDING", order_count: int = 0, accountID: str = "REPLACE_ME")
18@openbb.futures.search(category: str = "", exchange: str = "", description: str = "")
19@openbb.forex.oanda.cancel(orderID: str, accountID: str = "REPLACE_ME")
20@openbb.forex.oanda.order(price: int = 0, units: int = 0, instrument: Optional[str] = None, accountID: str = "REPLACE_ME")
21@openbb.forex.oanda.candles(instrument: Optional[str] = None, granularity: str = "D", candlecount: int = 180)
22@openbb.funds.holdings(loaded_funds: mstarpy.funds.Funds, holding_type: str = "all")
23@openbb.funds.exclusion(loaded_funds: mstarpy.funds.Funds)
24@openbb.futures.curve(symbol: str = "", date: Optional[str] = "")
25@openbb.funds.historical(loaded_funds: mstarpy.funds.Funds, start_date: str, end_date: str, comparison: str = "")
26@openbb.forex.oanda.positionbook(instrument: Optional[str] = None, accountID: str = "REPLACE_ME")
27@openbb.funds.sector(loaded_funds: mstarpy.funds.Funds, asset_type: str = "equity")
28@openbb.funds.carbon(loaded_funds: mstarpy.funds.Funds)
29@openbb.funds.load(term: str = "", country: str = "US")
30@openbb.funds.search(term: str = "", country: str = "", limit: Any = 10)
31@openbb.portfolio.es(portfolio_engine: portfolio_engine.PortfolioEngine, use_mean: bool = False, distribution: str = "normal", percentile: float = 99.9)
32@openbb.portfolio.bench(portfolio_engine: portfolio_engine.PortfolioEngine, symbol: str, full_shares: bool = False)
33@openbb.portfolio.rsharpe(portfolio_engine: pd.DataFrame, risk_free_rate: float = 0, window: str = "1y")
34@openbb.portfolio.distr(portfolio_engine: portfolio_engine.PortfolioEngine, window: str = "all")
35@openbb.portfolio.mret(portfolio_engine: portfolio_engine.PortfolioEngine, window: str = "all")
36@openbb.portfolio.holdv(portfolio_engine: portfolio_engine.PortfolioEngine)
37@openbb.portfolio.load(transactions_file_path: str, benchmark_symbol: str = "SPY", full_shares: bool = False, risk_free_rate: float = 0)
38@openbb.portfolio.om(portfolio_engine: portfolio_engine.PortfolioEngine, threshold_start: float = 0, threshold_end: float = 1.5)
39@openbb.portfolio.rbeta(portfolio_engine: portfolio_engine.PortfolioEngine, window: str = "1y")
40@openbb.portfolio.rsort(portfolio_engine: portfolio_engine.PortfolioEngine, risk_free_rate: float = 0, window: str = "1y")
41@openbb.portfolio.yret(portfolio_engine: portfolio_engine.PortfolioEngine, window: str = "all")
42@openbb.futures.historical(symbols: Union[str, List[str]], start_date: str, end_date: str, source: Optional[str] = "YahooFinance", expiry: Optional[str] = "")
43@openbb.portfolio.dret(portfolio_engine: portfolio_engine.PortfolioEngine, window: str = "all")
44@openbb.portfolio.maxdd(portfolio_engine: portfolio_engine.PortfolioEngine, is_returns: bool = False)
45@openbb.portfolio.perf(portfolio_engine: portfolio_engine.PortfolioEngine, show_all_trades: bool = False)
46@openbb.portfolio.summary(portfolio_engine: portfolio_engine.PortfolioEngine, window: str = "all", risk_free_rate: float = 0)
47@openbb.portfolio.var(portfolio_engine: portfolio_engine.PortfolioEngine, use_mean: bool = False, adjusted_var: bool = False, student_t: bool = False, percentile: float = 99.9)
48@openbb.portfolio.metric.jensens(portfolio_engine: portfolio_engine.PortfolioEngine, risk_free_rate: float = 0, window: str = "1y")
49@openbb.portfolio.metric.maxdrawdown(portfolio_engine: portfolio_engine.PortfolioEngine)
50@openbb.portfolio.metric.tail(portfolio_engine: portfolio_engine.PortfolioEngine, window: int = 252)
51@openbb.portfolio.show(portfolio_engine: portfolio_engine.PortfolioEngine)
52@openbb.portfolio.metric.skew(portfolio_engine: portfolio_engine.PortfolioEngine)
53@openbb.portfolio.metric.kurtosis(portfolio_engine: portfolio_engine.PortfolioEngine)
54@openbb.portfolio.holdp(portfolio_engine: portfolio_engine.PortfolioEngine)
55@openbb.portfolio.metric.commonsense(portfolio_engine: portfolio_engine.PortfolioEngine)
56@openbb.portfolio.metric.gaintopain(portfolio_engine: portfolio_engine.PortfolioEngine)
57@openbb.portfolio.metric.sharpe(portfolio_engine: portfolio_engine.PortfolioEngine, risk_free_rate: float = 0)
58@openbb.portfolio.metric.trackerr(portfolio_engine: portfolio_engine.PortfolioEngine, window: int = 252)
59@openbb.portfolio.metric.calmar(portfolio_engine: portfolio_engine.PortfolioEngine, window: int = 756)
60@openbb.portfolio.metric.kelly(portfolio_engine: portfolio_engine.PortfolioEngine)
61@openbb.portfolio.metric.payoff(portfolio_engine: portfolio_engine.PortfolioEngine)
62@openbb.portfolio.rvol(portfolio_engine: portfolio_engine.PortfolioEngine, window: str = "1y")
63@openbb.portfolio.metric.rsquare(portfolio_engine: portfolio_engine.PortfolioEngine)
64@openbb.portfolio.metric.sortino(portfolio_engine: portfolio_engine.PortfolioEngine, risk_free_rate: float = 0)
65@openbb.portfolio.metric.profitfactor(portfolio_engine: portfolio_engine.PortfolioEngine)
66@openbb.portfolio.metric.volatility(portfolio_engine: portfolio_engine.PortfolioEngine)
67@openbb.portfolio.metric.information(portfolio_engine: portfolio_engine.PortfolioEngine)
68@openbb.stocks.news(term: str = "", sort: str = "articlePublishedDate")
69@openbb.stocks.tob(symbol: str, exchange: str = "BZX")
70@openbb.portfolio.alloc.regions(portfolio_engine: portfolio_engine.PortfolioEngine, limit: int = 10, tables: bool = False, recalculate: bool = False)
71@openbb.portfolio.alloc.countries(portfolio_engine: portfolio_engine.PortfolioEngine, limit: int = 10, tables: bool = False, recalculate: bool = False)
72@openbb.portfolio.alloc.sectors(portfolio_engine: portfolio_engine.PortfolioEngine, limit: int = 10, tables: bool = False, recalculate: bool = False)
73@openbb.stocks.quote(symbols: List[str])
74@openbb.portfolio.alloc.assets(portfolio_engine: portfolio_engine.PortfolioEngine, tables: bool = False, limit: int = 10, recalculate: bool = False)
75@openbb.stocks.process_candle(data: pd.DataFrame)
76@openbb.stocks.disc.trending(limit: int = 5)
77@openbb.stocks.load(symbol: str, start_date: Union[datetime.datetime, str, NoneType] = None, interval: int = 1440, end_date: Union[datetime.datetime, str, NoneType] = None, prepost: bool = False, source: str = "YahooFinance", weekly: bool = False, monthly: bool = False, verbose: bool = True)
78@openbb.stocks.disc.ulc()
79@openbb.stocks.disc.lowfloat()
80@openbb.stocks.search(query: str = "", country: str = "", sector: str = "", industry_group: str = "", industry: str = "", exchange: str = "", exchange_country: str = "", all_exchanges: bool = False)
81@openbb.stocks.disc.hotpenny()
82@openbb.stocks.disc.gtech()
83@openbb.stocks.disc.active()
84@openbb.stocks.disc.pipo(num_days_behind: int = 5, start_date: Optional[str] = None)
85@openbb.stocks.disc.ipo(start_date: Optional[str] = None, end_date: Optional[str] = None)
86@openbb.stocks.disc.gainers()
87@openbb.stocks.disc.ugs()
88@openbb.stocks.disc.asc()
89@openbb.stocks.disc.dividends(date: Optional[str] = None)
90@openbb.stocks.disc.arkord(buys_only: bool = False, sells_only: bool = False, fund: str = "")
91@openbb.stocks.disc.filings(pages: int = 1)
92@openbb.stocks.disc.rtat()
93@openbb.stocks.disc.upcoming(limit: int = 5, start_date: datetime.date = 2023-09-04)
94@openbb.stocks.candle(symbol: str, data: Optional[pd.DataFrame] = None, add_trend: bool = False, ma: Optional[Iterable[int]] = None, asset_type: str = "", start_date: Union[datetime.datetime, str, NoneType] = None, interval: int = 1440, end_date: Union[datetime.datetime, str, NoneType] = None, prepost: bool = False, source: str = "YahooFinance", weekly: bool = False, monthly: bool = False, ha: Optional[bool] = False, external_axes: bool = False, raw: bool = False, yscale: str = "linear")
95@openbb.stocks.disc.losers()
96@openbb.stocks.qa.historical_5(symbol: str)
97@openbb.stocks.qa.fama_raw()
98@openbb.stocks.disc.fipo(num_days_ahead: int = 5, end_date: Optional[str] = None)
99@openbb.stocks.qa.capm(symbol: str)
100@openbb.stocks.ca.sentiment(symbols: List[str])
101@openbb.stocks.ca.cashflow(similar: List[str], timeframe: str = "2022", quarter: bool = False)
102@openbb.stocks.ca.volume(similar: List[str], start_date: Optional[str] = None, end_date: Optional[str] = None)
103@openbb.stocks.ca.scorr(similar: List[str])
104@openbb.stocks.ca.similar(symbol: str, source: Any = "Finviz")
105@openbb.stocks.ca.balance(similar: List[str], timeframe: str = "2022", quarter: bool = False)
106@openbb.stocks.ca.screener(similar: List[str], data_type: str = "overview")
107@openbb.stocks.ca.income(similar: List[str], timeframe: str = "2022", quarter: bool = False)
108@openbb.stocks.qa.beta(symbol: str, ref_symbol: str, data: Optional[pd.DataFrame] = None, ref_data: Optional[pd.DataFrame] = None, interval: int = 1440)
109@openbb.stocks.fa.customer(symbol: str)
110@openbb.stocks.fa.ratios(symbol: str, limit: int = 5, quarterly: bool = False)
111@openbb.stocks.fa.analysis(symbol: str)
112@openbb.stocks.screener.screener_data(preset_loaded: str = "top_gainers", data_type: str = "overview", limit: int = -1, ascend: bool = False)
113@openbb.stocks.ca.hist(similar: List[str], start_date: Optional[str] = None, end_date: Optional[str] = None, candle_type: str = "a")
114@openbb.stocks.fa.shrs(symbol: str, holder: str = "institutional")
115@openbb.stocks.fa.cal(symbol: str)
116@openbb.stocks.fa.dupont(symbol: str)
117@openbb.stocks.fa.key(symbol: str)
118@openbb.stocks.fa.dcf(symbol: str, limit: int = 5, quarterly: bool = False)
119@openbb.stocks.fa.historical_5(symbol: str)
120@openbb.stocks.fa.overview(symbol: str, source: str = "YahooFinance")
121@openbb.stocks.fa.est(symbol: str)
122@openbb.stocks.fa.news(symbol: str)
123@openbb.stocks.fa.income(symbol: str, quarterly: bool = False, ratios: bool = False, source: str = "YahooFinance", limit: int = 10)
124@openbb.stocks.ca.hcorr(similar: List[str], start_date: Optional[str] = None, end_date: Optional[str] = None, candle_type: str = "a")
125@openbb.stocks.fa.supplier(symbol: str)
126@openbb.stocks.fa.fama_coe(symbol: str)
127@openbb.stocks.fa.enterprise(symbol: str, start_date: Optional[str] = None, end_date: Optional[str] = None, quarterly: bool = False)
128@openbb.stocks.fa.revfc(ticker: str)
129@openbb.stocks.fa.fraud(symbol: str, detail: bool = False)
130@openbb.stocks.fa.fama_raw()
131@openbb.stocks.fa.similar_dfs(symbol: str, info: Dict[str, Any], n: int, no_filter: bool = False)
132@openbb.stocks.fa.mgmt(symbol: str)
133@openbb.stocks.fa.rot(symbol: str)
134@openbb.stocks.fa.score(symbol: str, years: int)
135@openbb.stocks.fa.rating(symbol: str)
136@openbb.stocks.fa.epsfc(ticker: str)
137@openbb.stocks.fa.mktcap(symbol: str, start_date: Optional[str] = None, end_date: Optional[str] = None)
138@openbb.stocks.fa.sec(symbol: str, limit: int = 20, year: Optional[int] = None, form_group: Optional[str] = None)
139@openbb.stocks.fa.growth(symbol: str, limit: int = 5, quarterly: bool = False)
140@openbb.stocks.fa.balance(symbol: str, quarterly: bool = False, ratios: bool = False, source: str = "YahooFinance", limit: int = 10)
141@openbb.stocks.fa.metrics(symbol: str, limit: int = 5, quarterly: bool = False)
142@openbb.stocks.fa.splits(symbol: str)
143@openbb.stocks.fa.analyst(symbol: str)
144@openbb.stocks.fa.dcfc(symbol: str, limit: int = 5, quarterly: bool = False)
145@openbb.stocks.fa.cash(symbol: str, quarterly: bool = False, ratios: bool = False, source: str = "YahooFinance", limit: int = 10)
146@openbb.stocks.fa.divs(symbol: str)
147@openbb.stocks.ins.blcs()
148@openbb.stocks.fa.earnings(symbol: str, source: str = "YahooFinance", quarterly: bool = False)
149@openbb.stocks.ins.blis()
150@openbb.stocks.ins.blcp()
151@openbb.stocks.ins.lis()
152@openbb.stocks.ins.blip()
153@openbb.stocks.ins.lit()
154@openbb.stocks.fa.pt(symbol: str)
155@openbb.stocks.ins.blop()
156@openbb.stocks.ins.lip()
157@openbb.stocks.ins.blos()
158@openbb.stocks.ins.stats(symbol: str)
159@openbb.stocks.ins.lpsb()
160@openbb.stocks.ins.lcb()
161@openbb.stocks.ins.filter(preset: str)
162@openbb.stocks.ins.act(symbol: str)
163@openbb.stocks.options.dte(chain: pd.DataFrame)
164@openbb.stocks.ins.lins(symbol: str)
165@openbb.stocks.options.info(symbol: str)
166@openbb.stocks.options.last_price(symbol: str)
167@openbb.stocks.ins.print_insider_data(type_insider: str = "lcb")
168@openbb.stocks.options.expirations(symbol: str, source: str = "Nasdaq")
169@openbb.stocks.options.vsurf(symbol: str)
170@openbb.stocks.options.grhist(symbol: str)
171@openbb.stocks.options.hist(symbol: str, exp: str, strike: Union[int, float, str], call: bool = True, source: Any = "ChartExchange")
172@openbb.stocks.options.pcr(symbol: str, window: int = 30, start_date: Optional[str] = None)
173@openbb.stocks.options.chains(symbol: str, source: str = "Nasdaq", expiration: Optional[str] = None)
174@openbb.stocks.options.eodchain(symbol: str, date: str, quiet: bool = False)
175@openbb.stocks.options.price(symbol: str, source: str = "Nasdaq")
176@openbb.stocks.options.generate_data(current_price: float, options: List[Dict[str, int]], underlying: int)
177@openbb.stocks.options.oi(chain: pd.DataFrame, current_price: float, symbol: str, expiry: str, min_sp: float = -1, max_sp: float = -1, calls_only: bool = False, puts_only: bool = False, raw: bool = False, export: str = "", sheet_name: Optional[str] = None, external_axes: bool = False)
178@openbb.stocks.options.load_options_chains(symbol: str, source: str = "CBOE", date: str = "", pydantic: bool = False)
179@openbb.stocks.options.greeks(current_price: float, chain: pd.DataFrame, expire: str, div_cont: float = 0, rf: Optional[float] = None)
180@openbb.stocks.options.vol(chain: pd.DataFrame, current_price: float, symbol: str, expiry: str, min_sp: float = -1, max_sp: float = -1, calls_only: bool = False, puts_only: bool = False, raw: bool = False, export: str = "", sheet_name: Optional[str] = None, external_axes: bool = False)
181@openbb.stocks.options.voi(chain: pd.DataFrame, current_price: float, symbol: str, expiry: str, min_sp: float = -1, max_sp: float = -1, raw: bool = False, export: str = "", sheet_name: Optional[str] = None, external_axes: bool = False)
182@openbb.stocks.gov.lasttrades(gov_type: str = "congress", limit: int = -1, representative: str = "")
183@openbb.stocks.options.unu(limit: int = 100)
184@openbb.stocks.options.get_strategies(options: openbb_terminal.stocks.options.op_helpers.Options, days: Optional[list[int]] = None, straddle_strike: Optional[float] = 0, strangle_moneyness: Optional[list[float]] = None, synthetic_longs: Optional[list[float]] = None, synthetic_shorts: Optional[list[float]] = None, vertical_calls: Optional[list[float]] = None, vertical_puts: Optional[list[float]] = None)
185@openbb.stocks.gov.contracts(symbol: str, past_transaction_days: int = 10)
186@openbb.stocks.gov.government_trading(gov_type: str = "congress", symbol: str = "")
187@openbb.stocks.gov.lobbying(symbol: str, limit: int = 10)
188@openbb.stocks.gov.qtrcontracts(analysis: str = "total", limit: int = 5)
189@openbb.stocks.gov.topsells(gov_type: str = "congress", past_transactions_months: int = 6)
190@openbb.stocks.gov.toplobbying()
191@openbb.stocks.gov.histcont(symbol: str)
192@openbb.stocks.gov.gtrades(symbol: str, gov_type: str = "congress", past_transactions_months: int = 6)
193@openbb.stocks.ba.trending()
194@openbb.stocks.ba.wsb(limit: int = 10, new: bool = False)
195@openbb.stocks.gov.lastcontracts(past_transaction_days: int = 2)
196@openbb.stocks.ta.summary(symbol: str)
197@openbb.stocks.ba.getdd(limit: int = 5, n_days: int = 3, show_all_flairs: bool = False)
198@openbb.stocks.ba.rise(symbol: str, limit: int = 10)
199@openbb.stocks.gov.topbuys(gov_type: str = "congress", past_transactions_months: int = 6)
200@openbb.stocks.ta.recom(symbol: str, screener: str = "america", exchange: str = "", interval: str = "")
201@openbb.stocks.ba.snews(symbol: str)
202@openbb.stocks.ba.popular(limit: int = 10, post_limit: int = 50, subreddits: str = "")
203@openbb.stocks.ba.cnews(symbol: str, start_date: Optional[str] = None, end_date: Optional[str] = None)
204@openbb.stocks.ba.bullbear(symbol: str)
205@openbb.stocks.ba.queries(symbol: str, limit: int = 10)
206@openbb.stocks.ba.mentions(symbol: str)
207@openbb.stocks.ba.messages(symbol: str, limit: int = 30)
208@openbb.stocks.ba.headlines(symbol: str)
209@openbb.stocks.ba.ns(ticker: str = "", start_date: str = "", end_date: str = "", date: str = "", limit: int = 100, offset: int = 0)
210@openbb.stocks.ba.text_sent(post_data: List[str])
211@openbb.stocks.ba.stalker(user: str, limit: int = 30)
212@openbb.stocks.th.check_if_open(bursa: pd.DataFrame, exchange: str)
213@openbb.stocks.ba.redditsent(symbol: str, limit: int = 100, sortby: str = "relevance", time_frame: str = "week", full_search: bool = True, subreddits: str = "all")
214@openbb.stocks.th.closed()
215@openbb.stocks.th.exchange(symbol: str)
216@openbb.stocks.th.all()
217@openbb.stocks.th.open()
218@openbb.stocks.ba.regions(symbol: str)
219@openbb.stocks.dps.shorted()
220@openbb.stocks.dps.ctb()
221@openbb.stocks.dps.hsi()
222@openbb.stocks.dps.sidtc(sortby: str = "float")
223@openbb.stocks.dps.psi_q(symbol: str, nyse: bool = False)
224@openbb.stocks.dps.pos(sortby: str = "dpp_dollar", ascend: bool = False)
225@openbb.alt.hn(limit: int = 10)
226@openbb.stocks.dps.dpotc(symbol: str)
227@openbb.stocks.dps.spos(symbol: str)
228@openbb.alt.realestate.get_towns_sold_prices(town: str, start_date: str, end_date: str, limit: int = 25)
229@openbb.stocks.dps.psi_sg(symbol: str)
230@openbb.alt.realestate.get_estate_sales(postcode: str, limit: int = 25)
231@openbb.alt.oss._retry_session(url: str, retries: int = 3, backoff_factor: float = 1.0)
232@openbb.alt.realestate.get_region_stats(region: str, start_date: str = "2010-01-01", end_date: str = "")
233@openbb.stocks.dps.prom(limit: int = 1000, tier_ats: str = "T1")
234@openbb.alt.oss.github_data(url: str, kwargs: Any)
235@openbb.alt.oss._make_request(url: str)
236@openbb.alt.oss.summary(repo: str)
237@openbb.alt.oss.search(sortby: str = "stars", page: int = 1, categories: str = "")
238@openbb.stocks.dps.ftd(symbol: str, start_date: Optional[str] = None, end_date: Optional[str] = None, limit: int = 0)
239@openbb.alt.oss.history(repo: str)
240@openbb.alt.covid.global_cases(country: str)
241@openbb.alt.covid.stat(country: str, stat: str = "cases")
242@openbb.alt.covid.global_deaths(country: str)
243@openbb.alt.covid.slopes(days_back: int = 30, threshold: int = 10000, ascend: bool = False)
244@openbb.alt.oss.ross()
245@openbb.alt.oss.top(sortby: str, limit: int = 50, categories: str = "")
246@openbb.alt.covid.ov(country: str)
247@openbb.alt.companieshouse.get_persons_with_significant_control(company_number: str)
248@openbb.alt.companieshouse.get_filing_document(company_number: str, transactionID: str)
249@openbb.alt.companieshouse.get_filings(company_number: str, category: str = "", start_index: Any = 0)
250@openbb.alt.companieshouse.get_charges(company_number: str, export: str = "")
251@openbb.alt.companieshouse.get_company_info(company_number: str)
252@openbb.alt.companieshouse.get_search_results(searchStr: str, limit: int = 20)
253@openbb.alt.companieshouse.get_officers(company_number: str)
254@openbb.qa.hist(data: pd.DataFrame, target: str, symbol: str = "", bins: int = 15, external_axes: bool = False)
255@openbb.alt.companieshouse.download_filing_document(company_number: str, company_name: str, transactionID: str, export: str = "")
256@openbb.qa.qqplot(data: pd.DataFrame, target: str, symbol: str = "", external_axes: bool = False)
257@openbb.qa.spread(data: pd.DataFrame, window: int = 14)
258@openbb.qa.quantile(data: pd.DataFrame, window: int = 14, quantile_pct: float = 0.5)
259@openbb.qa.unitroot(data: pd.DataFrame, fuller_reg: str = "c", kpss_reg: str = "c")
260@openbb.qa.kurtosis(data: pd.DataFrame, window: int = 14)
261@openbb.qa.es(data: pd.DataFrame, use_mean: bool = False, distribution: str = "normal", percentile: Union[float, int] = 99.9, portfolio: bool = False)
262@openbb.qa.cdf(data: pd.DataFrame, target: str, symbol: str = "", export: str = "", sheet_name: Optional[str] = None, external_axes: bool = False)
263@openbb.qa.acf(data: pd.DataFrame, target: str, symbol: str = "", lags: int = 15, external_axes: bool = False)
264@openbb.qa.line(data: pd.Series, title: str = "", log_y: bool = True, markers_lines: Optional[List[datetime.datetime]] = None, markers_scatter: Optional[List[datetime.datetime]] = None, export: str = "", sheet_name: Optional[str] = None, external_axes: bool = False)
265@openbb.qa.sharpe(data: pd.DataFrame, rfr: float = 0, window: float = 252)
266@openbb.qa.omega(data: pd.DataFrame, threshold_start: float = 0, threshold_end: float = 1.5)
267@openbb.qa.cusum(data: pd.DataFrame, target: str, threshold: float = 5, drift: float = 2.1, external_axes: bool = False)
268@openbb.qa.summary(data: pd.DataFrame)
269@openbb.qa.skew(data: pd.DataFrame, window: int = 14)
270@openbb.qa.calculate_adjusted_var(kurtosis: float, skew: float, ndp: float, std: float, mean: float)
271@openbb.qa.bw(data: pd.DataFrame, target: str, symbol: str = "", yearly: bool = True, external_axes: bool = False)
272@openbb.qa.normality(data: pd.DataFrame)
273@openbb.qa.rolling(data: pd.DataFrame, window: int = 14)
274@openbb.qa.sortino(data: pd.DataFrame, target_return: float = 0, window: float = 252, adjusted: bool = False)
275@openbb.fixedincome.iorb(start_date: Optional[str] = None, end_date: Optional[str] = None)
276@openbb.fixedincome.cp(maturity: str = "30d", category: str = "financial", grade: str = "aa", start_date: Optional[str] = None, end_date: Optional[str] = None)
277@openbb.fixedincome.hqm(date: Optional[str] = None, par: bool = False)
278@openbb.fixedincome.moody(data_type: str = "aaa", spread: Optional[str] = None, start_date: Optional[str] = None, end_date: Optional[str] = None)
279@openbb.qa.decompose(data: pd.DataFrame, multiplicative: bool = False)
280@openbb.qa.var(data: pd.DataFrame, use_mean: bool = False, adjusted_var: bool = False, student_t: bool = False, percentile: Union[int, float] = 99.9, portfolio: bool = False)
281@openbb.fixedincome.tmc(parameter: str = "3_month", start_date: Optional[str] = None, end_date: Optional[str] = None)
282@openbb.fixedincome.projection(long_run: bool = False)
283@openbb.fixedincome.ffrmc(parameter: str = "10_year", start_date: Optional[str] = None, end_date: Optional[str] = None)
284@openbb.fixedincome.treasury(short_term: Optional[list] = None, long_term: Optional[list] = None, forecast: bool = False, start_date: Optional[str] = None, end_date: Optional[str] = None)
285@openbb.fixedincome.estr(parameter: str = "volume_weighted_trimmed_mean_rate", start_date: Optional[str] = None, end_date: Optional[str] = None)
286@openbb.fixedincome.ecb(interest_type: Optional[str] = None, start_date: Optional[str] = None, end_date: Optional[str] = None)
287@openbb.fixedincome.spot(maturity: List = ['10y'], category: List = ['spot_rate'], start_date: Optional[str] = None, end_date: Optional[str] = None)
288@openbb.fixedincome.dwpcr(parameter: str = "daily_excl_weekend", start_date: Optional[str] = None, end_date: Optional[str] = None)
289@openbb.fixedincome.ecbycrv(date: str = "", yield_type: str = "spot_rate", return_date: bool = False, detailed: bool = False, any_rating: bool = True)
290@openbb.fixedincome.sonia(parameter: str = "rate", start_date: Optional[str] = None, end_date: Optional[str] = None)
291@openbb.fixedincome.sofr(parameter: str = "overnight", start_date: Optional[str] = None, end_date: Optional[str] = None)
292@openbb.fixedincome.icespread(category: str = "all", area: str = "us", grade: str = "non_sovereign", options: bool = False, start_date: Optional[str] = None, end_date: Optional[str] = None)
293@openbb.fixedincome.fed(parameter: str = "monthly", start_date: Optional[str] = None, end_date: Optional[str] = None, overnight: bool = False, quantiles: bool = False, target: bool = False)
294@openbb.fixedincome.ycrv(date: str = "", return_date: bool = False, inflation_adjusted: bool = False, spot_or_par: Optional[str] = None)
295@openbb.fixedincome.icebofa(data_type: str = "yield", category: str = "all", area: str = "us", grade: str = "non_sovereign", options: bool = False, start_date: Optional[str] = None, end_date: Optional[str] = None)
296@openbb.fixedincome.tbffr(parameter: str = "3_month", start_date: Optional[str] = None, end_date: Optional[str] = None)
297@openbb.econometrics.fdols(Y: pd.DataFrame, X: pd.DataFrame)
298@openbb.econometrics.garch(data: pd.Series, p: int = 1, o: int = 0, q: int = 1, mean: str = "constant", horizon: int = 100)
299@openbb.econometrics.get_regression_data(regression_variables: List[tuple], data: Dict[str, pd.DataFrame], regression_type: str = "")
300@openbb.econometrics.fe(Y: pd.DataFrame, X: pd.DataFrame, entity_effects: bool = False, time_effects: bool = False)
301@openbb.econometrics.comparison(regressions: Dict, export: str = "", sheet_name: Optional[str] = None)
302@openbb.econometrics.bpag(model: statsmodels.regression.linear_model.RegressionResultsWrapper)
303@openbb.econometrics.load(file: str, sheet_name: Optional[str] = None, data_files: Optional[Dict[Any, Any]] = None, data_examples: Optional[Dict[Any, Any]] = None)
304@openbb.econometrics.coint(datasets: pd.Series, return_z: bool = False)
305@openbb.econometrics.bols(Y: pd.DataFrame, X: pd.DataFrame)
306@openbb.econometrics.root(data: pd.Series, fuller_reg: str = "c", kpss_reg: str = "c")
307@openbb.econometrics.pols(Y: pd.DataFrame, X: pd.DataFrame)
308@openbb.econometrics.norm(data: pd.Series)
309@openbb.econometrics.vif(dataset: pd.DataFrame, columns: Optional[list] = None)
310@openbb.econometrics.dwat(model: statsmodels.regression.linear_model.RegressionResultsWrapper)
311@openbb.econometrics.clean(dataset: pd.DataFrame, fill: str = "", drop: str = "", limit: Optional[int] = None)
312@openbb.econometrics.options(datasets: Dict[str, pd.DataFrame], dataset_name: str = "")
313@openbb.econometrics.re(Y: pd.DataFrame, X: pd.DataFrame)
314@openbb.fixedincome.ameribor(parameter: str = "overnight", start_date: Optional[str] = None, end_date: Optional[str] = None)
315@openbb.econometrics.bgod(model: pd.DataFrame, lags: int = 3)
316@openbb.etf.holdings(symbol: str)
317@openbb.etf.etf_by_name(name_to_search: str)
318@openbb.etf.ln(name: str)
319@openbb.econometrics.granger(dependent_series: pd.Series, independent_series: pd.Series, lags: int = 3)
320@openbb.etf.overview(symbol: str)
321@openbb.etf.compare(symbols: List[str])
322@openbb.etf.etf_by_category(category: str)
323@openbb.etf.weights(name: str)
324@openbb.etf.ld(description: str)
325@openbb.etf.news(query: str, limit: int = 10, start_date: Optional[str] = None, show_newest: bool = True, sources: str = "")
326@openbb.etf.symbols()
327@openbb.etf.disc.mover(sort_type: str = "gainers", export: bool = False)
328@openbb.fixedincome.usrates(parameter: str = "tbills", maturity: str = "3_months", start_date: Optional[str] = None, end_date: Optional[str] = None)
329@openbb.etf.load(symbol: str, start_date: Union[datetime.datetime, str, NoneType] = None, interval: int = 1440, end_date: Union[datetime.datetime, str, NoneType] = None, prepost: bool = False, source: str = "YahooFinance", weekly: bool = False, monthly: bool = False, verbose: bool = True)
330@openbb.ta.hma(data: pd.Series, length: int = 50, offset: int = 0)
331@openbb.ta.donchian(data: pd.DataFrame, upper_length: int = 20, lower_length: int = 20)
332@openbb.econometrics.panel(Y: pd.DataFrame, X: pd.DataFrame, regression_type: str = "OLS", entity_effects: bool = False, time_effects: bool = False)
333@openbb.ta.rvol_garman_klass(data: pd.DataFrame, window: int = 30, trading_periods: Optional[int] = None, is_crypto: bool = False, clean: Any = True)
334@openbb.ta.aroon(data: pd.DataFrame, window: int = 25, scalar: int = 100)
335@openbb.etf.candle(symbol: str, data: Optional[pd.DataFrame] = None, add_trend: bool = False, ma: Optional[Iterable[int]] = None, asset_type: str = "", start_date: Union[datetime.datetime, str, NoneType] = None, interval: int = 1440, end_date: Union[datetime.datetime, str, NoneType] = None, prepost: bool = False, source: str = "YahooFinance", weekly: bool = False, monthly: bool = False, ha: Optional[bool] = False, external_axes: bool = False, raw: bool = False, yscale: str = "linear")
336@openbb.ta.fib(data: pd.DataFrame, limit: int = 120, start_date: Optional[Any] = None, end_date: Optional[Any] = None)
337@openbb.ta.stoch(data: pd.DataFrame, fastkperiod: int = 14, slowdperiod: int = 3, slowkperiod: int = 3)
338@openbb.ta.sma(data: pd.Series, length: int = 50, offset: int = 0)
339@openbb.ta.rvol_yang_zhang(data: pd.DataFrame, window: int = 30, trading_periods: Optional[int] = None, is_crypto: bool = False, clean: Any = True)
340@openbb.ta.rsi(data: pd.Series, window: int = 14, scalar: float = 100, drift: int = 1)
341@openbb.ta.macd(data: pd.Series, n_fast: int = 12, n_slow: int = 26, n_signal: int = 9)
342@openbb.ta.bbands(data: pd.DataFrame, window: int = 15, n_std: float = 2, mamode: str = "ema")
343@openbb.ta.adosc(data: pd.DataFrame, use_open: bool = False, fast: int = 3, slow: int = 10)
344@openbb.ta.zlma(data: pd.Series, length: int = 50, offset: int = 0)
345@openbb.ta.ma(data: pd.Series, window: Optional[List[int]] = None, offset: int = 0, ma_type: str = "EMA", symbol: str = "", export: str = "", sheet_name: Optional[str] = None, external_axes: bool = False)
346@openbb.ta.wma(data: pd.Series, length: int = 50, offset: int = 0)
347@openbb.ta.rvol_rogers_satchell(data: pd.DataFrame, window: int = 30, trading_periods: Optional[int] = None, is_crypto: bool = False, clean: Any = True)
348@openbb.ta.kc(data: pd.DataFrame, window: int = 20, scalar: float = 2, mamode: str = "ema", offset: int = 0)
349@openbb.ta.ema(data: pd.Series, length: int = 50, offset: int = 0)
350@openbb.ta.rvol_parkinson(data: pd.DataFrame, window: int = 30, trading_periods: Optional[int] = None, is_crypto: bool = False, clean: Any = True)
351@openbb.ta.obv(data: pd.DataFrame)
352@openbb.econometrics.ols(Y: pd.DataFrame, X: pd.DataFrame)
353@openbb.ta.clenow(values: pd.Series, window: int = 90)
354@openbb.ta.fisher(data: pd.DataFrame, window: int = 14)
355@openbb.ta.ad(data: pd.DataFrame, use_open: bool = False)
356@openbb.ta.rvol_hodges_tompkins(data: pd.DataFrame, window: int = 30, trading_periods: Optional[int] = None, is_crypto: bool = False, clean: Any = True)
357@openbb.ta.demark(values: pd.Series)
358@openbb.ta.atr(data: pd.DataFrame, window: int = 14, mamode: str = "ema", offset: int = 0)
359@openbb.ta.cg(values: pd.Series, window: int)
360@openbb.ta.rvol_std(data: pd.DataFrame, window: int = 30, trading_periods: Optional[int] = None, is_crypto: bool = False, clean: bool = True)
361@openbb.ta.standard_deviation(data: pd.DataFrame, window: int = 30, trading_periods: Optional[int] = None, is_crypto: bool = False, clean: bool = True)
362@openbb.economy.fred_notes(search_query: str)
363@openbb.ta.cci(data: pd.DataFrame, window: int = 14, scalar: float = 0.0015)
364@openbb.economy.country_codes()
365@openbb.ta.adx(data: pd.DataFrame, window: int = 14, scalar: int = 100, drift: int = 1)
366@openbb.ta.vwap(data: pd.DataFrame, offset: int = 0)
367@openbb.economy.usdli(overlay: str = "", show: bool = False)
368@openbb.economy.future(future_type: str = "Indices", sortby: str = "ticker", ascend: bool = False)
369@openbb.economy.overview()
370@openbb.economy.events(countries: Union[List[str], str] = "", start_date: Optional[str] = None, end_date: Optional[str] = None)
371@openbb.economy.futures(source: Any = "WSJ", future_type: str = "Indices")
372@openbb.economy.search_index(keyword: list)
373@openbb.economy.usbonds()
374@openbb.economy.gdp(countries: Optional[str] = "united_states", units: str = "USD", start_date: Any = "", end_date: Any = "")
375@openbb.economy.treasury(maturity: Union[Literal['1m', '3m', '6m', '1y', '2y', '3y', '5y', '7y', '10y', '20y', '30y'], List[Literal['1m', '3m', '6m', '1y', '2y', '3y', '5y', '7y', '10y', '20y', '30y']], NoneType] = None, start_date: str = "2005-01-01", end_date: Optional[str] = "2023-09-04")
376@openbb.economy.fgdp(countries: Optional[List[str]], types: str = "real", units: str = "Q", start_date: Any = "", end_date: Any = "")
377@openbb.economy.trust(countries: Optional[List[str]], start_date: Any = "", end_date: Any = "")
378@openbb.economy.debt(countries: Optional[List[str]], start_date: Any = "", end_date: Any = "")
379@openbb.economy.ccpi(countries: Optional[List[str]], perspective: str = "TOT", frequency: str = "Q", units: str = "AGRWTH", start_date: Any = "", end_date: Any = "")
380@openbb.economy.cpi(countries: list, units: str = "growth_same", frequency: str = "monthly", harmonized: bool = False, smart_select: bool = True, options: bool = False, start_date: Optional[str] = None, end_date: Optional[str] = None)
381@openbb.economy.macro_countries()
382@openbb.economy.fred(series_ids: List[str], start_date: Optional[str] = None, end_date: Optional[str] = None)
383@openbb.economy.index(indices: list, interval: str = "1d", start_date: Optional[int] = None, end_date: Optional[int] = None, column: str = "Adj Close", returns: bool = False)
384@openbb.economy.macro_parameters()
385@openbb.economy.performance(group: str = "sector", sortby: str = "Name", ascend: bool = True)
386@openbb.economy.glbonds()
387@openbb.economy.available_indices()
388@openbb.economy.indices()
389@openbb.economy.rgdp(countries: Optional[List[str]], units: str = "PC_CHGPY", start_date: Any = "", end_date: Any = "")
390@openbb.economy.bigmac(country_codes: Optional[List[str]] = None)
391@openbb.economy.get_groups()
392@openbb.economy.valuation(group: str = "sector", sortby: str = "Name", ascend: bool = True)
393@openbb.economy.currencies()
394@openbb.economy.perfmap(period: str = "1d", map_filter: str = "sp500")
395@openbb.economy.balance(countries: Optional[List[str]], start_date: Any = "", end_date: Any = "")
396@openbb.economy.revenue(countries: Optional[List[str]], units: str = "PC_GDP", start_date: Any = "", end_date: Any = "")
397@openbb.crypto.price(symbol: str)
398@openbb.crypto.chart(prices_df: pd.DataFrame, to_symbol: str = "", from_symbol: str = "", source: str = "", exchange: str = "", interval: str = "", external_axes: bool = False, yscale: str = "linear")
399@openbb.crypto.find(query: str, source: str = "CoinGecko", key: str = "symbol", limit: int = 10)
400@openbb.crypto.load(symbol: str, start_date: Union[datetime.datetime, str, NoneType] = None, interval: Union[str, int] = "1440", exchange: str = "binance", to_symbol: str = "usd", end_date: Union[datetime.datetime, str, NoneType] = None, source: str = "YahooFinance")
401@openbb.crypto.defi.gov_proposals(status: str = "", sortby: str = "id", ascend: bool = True, limit: int = 10)
402@openbb.economy.spending(countries: Optional[List[str]], perspective: str = "TOT", units: str = "PC_GDP", start_date: Any = "", end_date: Any = "")
403@openbb.crypto.defi.dtvl(protocol: str)
404@openbb.crypto.defi.gacc(cumulative: bool = True)
405@openbb.crypto.candle(symbol: str, data: Optional[pd.DataFrame] = None, start_date: Union[datetime.datetime, str, NoneType] = None, end_date: Union[datetime.datetime, str, NoneType] = None, interval: Union[str, int] = "1440", exchange: str = "binance", to_symbol: str = "usdt", source: str = "CCXT", volume: bool = True, title: str = "", external_axes: bool = False, yscale: str = "linear", raw: bool = False)
406@openbb.crypto.defi.newsletters()
407@openbb.crypto.defi.gdapps(limit: int = 50)
408@openbb.crypto.defi.luna_supply(supply_type: str = "lunaSupplyChallengeStats", days: int = 30)
409@openbb.crypto.defi.validators(sortby: str = "votingPower", ascend: bool = True)
410@openbb.crypto.defi.stvl()
411@openbb.crypto.defi.ayr()
412@openbb.crypto.defi.aterra(asset: str = "ust", address: str = "terra1tmnqgvg567ypvsvk6rwsga3srp7e3lg6u0elp8")
413@openbb.economy.macro(parameters: Optional[list] = None, countries: Optional[list] = None, transform: str = "", start_date: str = "1900-01-01", end_date: Optional[str] = None, symbol: str = "")
414@openbb.crypto.defi.sratio(limit: int = 200)
415@openbb.crypto.defi.sreturn(limit: int = 200)
416@openbb.crypto.defi.ldapps(limit: int = 100, sortby: str = "", ascend: bool = False, description: bool = False, drop_chain: bool = True)
417@openbb.crypto.onchain.query_graph(url: str, query: str)
418@openbb.crypto.defi.sinfo(address: str = "")
419@openbb.crypto.defi.anchor_data(address: str = "")
420@openbb.crypto.onchain.info(address: Any)
421@openbb.crypto.onchain.hist(address: str, sortby: str = "timestamp", ascend: bool = True)
422@openbb.crypto.onchain.token_decimals(address: str)
423@openbb.crypto.onchain.baas(symbol: str = "WETH", to_symbol: str = "USDT", limit: int = 10, sortby: str = "date", ascend: bool = True)
424@openbb.crypto.onchain.erc20_tokens()
425@openbb.crypto.onchain.btc_transac()
426@openbb.crypto.defi.vaults(chain: Optional[str] = None, protocol: Optional[str] = None, kind: Optional[str] = None, ascend: bool = True, sortby: str = "apy")
427@openbb.crypto.onchain.ueat(interval: str = "day", limit: int = 90, sortby: str = "tradeAmount", ascend: bool = True)
428@openbb.crypto.onchain.dvcp(limit: int = 100, symbol: str = "UNI", to_symbol: str = "USDT", sortby: str = "date", ascend: bool = True)
429@openbb.crypto.onchain.btcsingleblock(blockhash: str)
430@openbb.crypto.onchain.whales(min_value: int = 800000, limit: int = 100, sortby: str = "date", ascend: bool = False)
431@openbb.ta.cones(data: pd.DataFrame, lower_q: float = 0.25, upper_q: float = 0.75, is_crypto: bool = False, model: str = "STD")
432@openbb.crypto.onchain.ttcp(network: str = "ethereum", exchange: str = "Uniswap", limit: int = 90, sortby: str = "tradeAmount", ascend: bool = True)
433@openbb.crypto.onchain.topledger(org_slug: str, query_slug: str)
434@openbb.crypto.onchain.prices(address: str, sortby: str = "date", ascend: bool = False)
435@openbb.crypto.onchain.gwei()
436@openbb.crypto.onchain.btc_supply()
437@openbb.crypto.onchain.hr(symbol: str, interval: str = "24h", start_date: str = "2010-01-01", end_date: Optional[str] = None)
438@openbb.crypto.onchain.balance(address: str, sortby: str = "index", ascend: bool = False)
439@openbb.crypto.onchain.dex_trades_monthly(trade_amount_currency: str = "USD", limit: int = 90, ascend: bool = True)
440@openbb.crypto.onchain.top(sortby: str = "rank", ascend: bool = False)
441@openbb.crypto.onchain.holders(address: str, sortby: str = "balance", ascend: bool = True)
442@openbb.crypto.onchain.tx(tx_hash: str)
443@openbb.crypto.onchain.th(address: str, sortby: str = "timestamp", ascend: bool = False)
444@openbb.crypto.disc.trending()
445@openbb.crypto.onchain.lt(trade_amount_currency: str = "USD", limit: int = 90, sortby: str = "tradeAmount", ascend: bool = True)
446@openbb.crypto.disc.defi_chains()
447@openbb.crypto.disc.dapp_chains()
448@openbb.crypto.disc.coin_list()
449@openbb.crypto.onchain.tv(symbol: str = "UNI", trade_amount_currency: str = "USD", sortby: str = "tradeAmount", ascend: bool = True)
450@openbb.crypto.disc.tokens()
451@openbb.crypto.disc.top_coins(source: str = "CoinGecko", limit: int = 10)
452@openbb.crypto.disc.coins_for_given_exchange(exchange_id: str = "binance", page: int = 1)
453@openbb.crypto.disc.nft_mktp(chain: str = "", sortby: str = "", order: str = "", limit: int = 10)
454@openbb.crypto.disc.categories_keys()
455@openbb.crypto.disc.dapp_metrics(dappId: int, chain: str = "", time_range: str = "")
456@openbb.crypto.disc.coins(limit: int = 250, category: str = "", sortby: str = "Symbol", ascend: bool = False)
457@openbb.crypto.disc.nft_mktp_chains()
458@openbb.crypto.disc.dapp_categories()
459@openbb.crypto.disc.cpsearch(query: str, category: Optional[Any] = None, modifier: Optional[Any] = None, sortby: str = "id", ascend: bool = True)
460@openbb.crypto.disc.fees(marketcap: bool, tvl: bool, date: Any)
461@openbb.crypto.disc.dapps(chain: str = "", page: int = 1, resultPerPage: int = 15)
462@openbb.crypto.dd.check_valid_binance_str(symbol: str)
463@openbb.crypto.dd.dev(symbol: str)
464@openbb.crypto.disc.gainers(interval: str = "1h", limit: int = 50, sortby: str = "market_cap_rank", ascend: bool = True)
465@openbb.crypto.dd.all_binance_trading_pairs()
466@openbb.crypto.dd.coin(symbol: str = "eth-ethereum")
467@openbb.crypto.dd.ath(symbol: str, currency: str = "USD")
468@openbb.crypto.disc.losers(interval: str = "1h", limit: int = 50, sortby: str = "market_cap_rank", ascend: bool = True)
469@openbb.crypto.dd.tk(symbol: str, coingecko_id: str)
470@openbb.crypto.dd.basic(symbol: str = "BTC")
471@openbb.crypto.dd.headlines(symbol: str)
472@openbb.crypto.dd.inv(symbol: str)
473@openbb.crypto.dd.mcapdom(symbol: str, interval: str = "1d", start_date: Optional[str] = None, end_date: Optional[str] = None)
474@openbb.crypto.dd.nonzero(symbol: str, start_date: str = "2010-01-01", end_date: Optional[str] = None)
475@openbb.crypto.dd.change(symbol: str, exchange: str = "binance", start_date: str = "2010-01-01", end_date: Optional[str] = None)
476@openbb.crypto.dd.ob(exchange: str, symbol: str, to_symbol: str)
477@openbb.crypto.dd.events(symbol: str = "BTC", sortby: str = "date", ascend: bool = False)
478@openbb.crypto.dd.social(symbol: str)
479@openbb.crypto.dd.exchanges()
480@openbb.crypto.dd.rm(symbol: str, ascend: bool = True)
481@openbb.crypto.dd.candle(symbol: str, interval: str = "24hour")
482@openbb.crypto.dd.active(symbol: str, interval: str = "24h", start_date: str = "2010-01-01", end_date: Optional[str] = None)
483@openbb.crypto.dd.twitter(symbol: str = "BTC", sortby: str = "date", ascend: bool = True)
484@openbb.crypto.dd.binance_available_quotes_for_each_coin()
485@openbb.crypto.dd.trading_pair_info(symbol: str)
486@openbb.crypto.dd.show_available_pairs_for_given_symbol(symbol: str = "ETH")
487@openbb.crypto.dd.trades(exchange_id: str, symbol: str, to_symbol: str)
488@openbb.crypto.dd.oi(symbol: str, interval: int = 0)
489@openbb.crypto.dd.tokenomics(symbol: str = "")
490@openbb.crypto.dd.fr(symbol: str)
491@openbb.crypto.dd.score(symbol: str)
492@openbb.crypto.dd.mt(symbol: str, timeseries_id: str, interval: str = "1d", start_date: Optional[str] = None, end_date: Optional[str] = None)
493@openbb.crypto.dd.close(symbol: str, start_date: str = "2010-01-01", end_date: Optional[str] = None, print_errors: bool = True)
494@openbb.crypto.dd.pi(symbol: str)
495@openbb.crypto.dd.news(limit: int = 60, post_kind: str = "news", filter_: Optional[str] = None, region: str = "en", source: Optional[str] = None, symbol: Optional[str] = None, sortby: str = "published_at", ascend: bool = True)
496@openbb.crypto.dd.balance(from_symbol: str, to_symbol: str = "USDT")
497@openbb.crypto.dd.ex(symbol: str = "BTC", sortby: str = "adjusted_volume_24h_share", ascend: bool = True)
498@openbb.crypto.dd.stats(symbol: str)
499@openbb.crypto.dd.ps(symbol: str = "BTC", quotes: str = "USD")
500@openbb.crypto.dd.get_mt(only_free: bool = True)
501@openbb.crypto.dd.atl(symbol: str, currency: str = "USD")
502@openbb.crypto.dd.gov(symbol: str)
503@openbb.crypto.dd.team(symbol: str)
504@openbb.crypto.dd.coin_market_chart(symbol: str = "", vs_currency: str = "usd", days: int = 30, kwargs: Any)
505@openbb.crypto.dd.gh(symbol: str, dev_activity: bool = False, interval: str = "1d", start_date: Optional[str] = None, end_date: Optional[str] = None)
506@openbb.crypto.dd.eb(symbol: str, exchange: str = "aggregated", start_date: Optional[str] = None, end_date: Optional[str] = None)
507@openbb.crypto.tools.apy(apr: float, compounding_times: int)
508@openbb.crypto.dd.links(symbol: str)
509@openbb.crypto.nft.fp(slug: str)
510@openbb.crypto.tools.il(price_changeA: float, price_changeB: float, proportion: float, initial_pool_value: float)
511@openbb.crypto.dd.pr(main_coin: str, to_symbol: Optional[str] = None, limit: Optional[int] = None, price: Optional[int] = None)
512@openbb.crypto.nft.collections()
513@openbb.crypto.nft.stats(slug: str)
514@openbb.crypto.ov.crypto_hack(slug: str)
515@openbb.crypto.dd.mkt(symbol: str = "BTC", quotes: str = "USD", sortby: str = "pct_volume_share", ascend: bool = True)
516@openbb.crypto.ov.crypto_hack_slugs()
517@openbb.crypto.ov.coin_list()
518@openbb.crypto.ov.info(symbols: str = "USD", sortby: str = "rank", ascend: bool = True)
519@openbb.crypto.ov.btcrb(start_date: str = "2010-01-01", end_date: Optional[str] = None)
520@openbb.crypto.ov.cbpairs(limit: int = 50, sortby: str = "quote_increment", ascend: bool = True)
521@openbb.crypto.ov.crypto_hacks(sortby: str = "Platform", ascend: bool = False)
522@openbb.crypto.ov.contracts(platform_id: str = "eth-ethereum", sortby: str = "active", ascend: bool = True)
523@openbb.crypto.ov.wf(limit: int = 100)
524@openbb.crypto.ov.hold(endpoint: str = "bitcoin")
525@openbb.crypto.ov.exrates(sortby: str = "Name", ascend: bool = False)
526@openbb.crypto.ov.wfpe(symbol: str)
527@openbb.crypto.ov.stables(limit: int = 15, sortby: str = "Market_Cap_[$]", ascend: bool = False)
528@openbb.crypto.ov.exchanges(source: str = "CoinGecko")
529@openbb.crypto.ov.globe(source: str = "CoinGecko")
530@openbb.crypto.ov.derivatives(sortby: str = "Rank", ascend: bool = False)
531@openbb.crypto.ov.defi()
532@openbb.crypto.ov.categories(sort_filter: str = "market_cap")
533@openbb.crypto.ov.altindex(period: int = 30, start_date: str = "2010-01-01", end_date: Optional[str] = None)
534@openbb.crypto.ov.indexes(sortby: str = "Name", ascend: bool = True)
535@openbb.crypto.ov.platforms()
536@openbb.crypto.ov.ewf()
537@openbb.crypto.ov.markets(symbols: str = "USD", sortby: str = "rank", ascend: bool = True)
538@openbb.crypto.ov.news(limit: int = 60, post_kind: str = "news", filter_: Optional[str] = None, region: str = "en", source: Optional[str] = None, symbol: Optional[str] = None, sortby: str = "published_at", ascend: bool = True)
539@openbb.crypto.ov.hm(limit: int = 250, category: str = "", sortby: str = "Symbol", ascend: bool = False)
540@openbb.crypto.ov.cr(rate_type: str = "borrow")
541@openbb.keys.get_keys_info()
542@openbb.keys.av(key: str, persist: bool = False, show_output: bool = False)
543@openbb.keys.polygon(key: str, persist: bool = False, show_output: bool = False)
544@openbb.crypto.ov.products(sortby: str = "Name", ascend: bool = True)
545@openbb.keys.glassnode(key: str, persist: bool = False, show_output: bool = False)
546@openbb.crypto.ov.exmarkets(exchange_id: str = "binance", symbols: str = "USD", sortby: str = "pair", ascend: bool = True)
547@openbb.keys.stocksera(key: str, persist: bool = False, show_output: bool = False)
548@openbb.keys.github(key: str, persist: bool = False, show_output: bool = False)
549@openbb.keys.cpanic(key: str, persist: bool = False, show_output: bool = False)
550@openbb.keys.rh(username: str, password: str, persist: bool = False, show_output: bool = False)
551@openbb.keys.ultima(key: str, persist: bool = False, show_output: bool = False)
552@openbb.keys.mykeys(show: bool = False)
553@openbb.keys.fmp(key: str, persist: bool = False, show_output: bool = False)
554@openbb.keys.ethplorer(key: str, persist: bool = False, show_output: bool = False)
555@openbb.keys.databento(key: str, persist: bool = False, show_output: bool = False)
556@openbb.keys.coinbase(key: str, secret: str, passphrase: str, persist: bool = False, show_output: bool = False)
557@openbb.keys.news(key: str, persist: bool = False, show_output: bool = False)
558@openbb.keys.santiment(key: str, persist: bool = False, show_output: bool = False)
559@openbb.keys.smartstake(key: str, access_token: str, persist: bool = False, show_output: bool = False)
560@openbb.keys.set_keys(keys_dict: Dict[str, Dict[str, Union[str, bool]]], persist: bool = False, show_output: bool = False)
561@openbb.keys.oanda(account: str, access_token: str, account_type: str = "", persist: bool = False, show_output: bool = False)
562@openbb.keys.fred(key: str, persist: bool = False, show_output: bool = False)
563@openbb.keys.tokenterminal(key: str, persist: bool = False, show_output: bool = False)
564@openbb.keys.degiro(username: str, password: str, secret: str = "", persist: bool = False, show_output: bool = False)
565@openbb.keys.reddit(client_id: str, client_secret: str, password: str, username: str, useragent: str, persist: bool = False, show_output: bool = False)
566@openbb.keys.messari(key: str, persist: bool = False, show_output: bool = False)
567@openbb.keys.eodhd(key: str, persist: bool = False, show_output: bool = False)
568@openbb.keys.biztoc(key: str, persist: bool = False, show_output: bool = False)
569@openbb.keys.quandl(key: str, persist: bool = False, show_output: bool = False)
570@openbb.keys.coinglass(key: str, persist: bool = False, show_output: bool = False)
571@openbb.keys.finnhub(key: str, persist: bool = False, show_output: bool = False)
572@openbb.keys.tradier(key: str, persist: bool = False, show_output: bool = False)
573@openbb.keys.walert(key: str, persist: bool = False, show_output: bool = False)
574@openbb.keys.bitquery(key: str, persist: bool = False, show_output: bool = False)
575@openbb.keys.binance(key: str, secret: str, persist: bool = False, show_output: bool = False)
576@openbb.keys.cmc(key: str, persist: bool = False, show_output: bool = False)
577@openbb.crypto.dd.trading_pairs()
